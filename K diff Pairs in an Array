class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        int i = 0;
        int j = 1;
        int ans = 0;
        while(i < nums.size() && j < nums.size()){
            if(nums[j] - nums[i] == k){
                ans++;
                i++;
                j++;
                while(j < nums.size() && nums[j] == nums[j-1]){
                    j++;
                }
            }
            else if(nums[j] - nums[i] > k){
                i++;
                if(j - i == 0){
                    j++;
                }
            }
            else{
                j++;
            } 
        }
        return ans;
    }
};

// Binary Search Code

class Solution {
public:

    int bs(vector<int>& nums, int start, int x){
        int end = nums.size()-1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(nums[mid] == x){
                return mid;
            }
            else if(nums[mid] < x){
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
        }
        return -1;
    }

    int findPairs(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        set<pair<int, int>> ans;

        for(int i=0; i<nums.size(); i++){
            if(bs(nums,i+1,nums[i]+k) != -1){
                ans.insert({nums[i], nums[i]+k});
            }
        }
        return ans.size();   
    }
};

T.C = 0(nlog(n))


